extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@override","@shareable"]
  )

type Query {
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]! @override(from: "monolith")
  "Search results for listings that fit the criteria provided"
  searchListings(criteria: SearchListingsInput): [Listing]!@override(from: "monolith")
  "Return the listings that belong to the currently logged-in host"
  hostListings: [Listing]! @override(from: "monolith")
  "Returns the details about this listing"
  listing(id: ID!): Listing @override(from: "monolith")
  "Returns all possible amenities for a listing"
  listingAmenities: [Amenity!]! @override(from: "monolith")
}

type Mutation {
  "Creates a new listing for the currently authenticated host"
  createListing(listing: CreateListingInput!): CreateListingResponse! @override(from: "monolith")
  "Updates an existing listing"
  updateListing(listingId: ID!, listing: UpdateListingInput!): UpdateListingResponse!  @override(from: "monolith")
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

"A listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value."
type Listing @key(fields:"id") {
  id: ID!
  host: Host!@override(from:"monolith")
  "The listing's title"
  title: String! @override(from: "monolith")
  "The listing's description"
  description: String! @override(from: "monolith")
  "The thumbnail image for the listing"
  photoThumbnail: String! @override(from: "monolith")
  "The number of beds available"
  numOfBeds: Int! @override(from: "monolith")
  "The cost per night"
  costPerNight: Float! @override(from: "monolith")
  "The location type of the listing"
  locationType: LocationType! @override(from: "monolith")
  "The amenities available for this listing"
  amenities: [Amenity] @override(from: "monolith") 
  "Calculated total cost of the listing with the given arguments"
  totalCost(checkInDate: String!, checkOutDate: String!): Float! @override(from: "monolith")
}

type Host @key(fields:"id"){
  id:ID!
}
type Booking @key(fields:"id"){
  id:ID!
  totalPrice: Float!  @override(from: "monolith")
}


"What the location provides. An amenity should be tied to a specific category."
type Amenity {
  id: ID! @override(from: "monolith")
  "The category for the amenity"
  category: AmenityCategory! @override(from: "monolith")
  "The name of the amenity. Should be short."
  name: String! @override(from: "monolith")
}

"The category an amenity belongs to."
enum AmenityCategory {
  ACCOMMODATION_DETAILS
  SPACE_SURVIVAL
  OUTDOORS
}

"A listing can be one of these types."
enum LocationType {
  SPACESHIP
  HOUSE
  CAMPSITE
  APARTMENT
  ROOM
}

"To search for a listing, you need these fields."
input SearchListingsInput {
  checkInDate: String!
  checkOutDate: String!
  numOfBeds: Int
  "The page in the search results, defaults to 1"
  page: Int
  "The number of listings you can display in a page, defaults to 5"
  limit: Int
  "The results sort order, defaults to cost descending"
  sortBy: SortByCriteria
}

"Listings can be sorted by these options"
enum SortByCriteria {
  COST_ASC
  COST_DESC
}

"Used to create a listing"
input CreateListingInput {
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The thumbnail image for the listing"
  photoThumbnail: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "The location type of the listing"
  locationType: LocationType!
  "The Listing's amenities "
  amenities: [ID!]!
}

"Updates the properties included. If none are given, don't update anything"
input UpdateListingInput {
  "The listing's title"
  title: String
  "The listing's description"
  description: String
  "The thumbnail image for the listing"
  photoThumbnail: String
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "The location type of the listing"
  locationType: LocationType
  "The Listing's amenities "
  amenities: [ID]
}

"Response after creating a listing"
type CreateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! @override(from: "monolith")
  "Indicates whether the mutation was successful"
  success: Boolean! @override(from: "monolith")
  "Human-readable message for the UI"
  message: String! @override(from: "monolith")
  "The newly created listing"
  listing: Listing @override(from: "monolith")
}

"Response after updating a listing"
type UpdateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! @override(from: "monolith")
  "Indicates whether the mutation was successful"
  success: Boolean! @override(from: "monolith")
  "Human-readable message for the UI"
  message: String! @override(from: "monolith")
  "The newly updated listing"
  listing: Listing @override(from: "monolith")
}